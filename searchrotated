class Solution {
    public int search(int[] nums, int target) {
        
        // int r;
        // int len = nums.length;
        // if(nums[0]>nums[len-1]){
        //     for(int i=nums.length-1;i>0;i--){
        //         if(nums[i]<nums[i-1]) r = i;
        //     }
        // }
        // search()
        int pivot = findpivot(nums);
        System.out.println(pivot);
        if(pivot == -1) return binarysearch(nums, target, 0, nums.length-1);
        else if(nums[0]>target) return binarysearch(nums, target, pivot, nums.length-1);
        else return binarysearch(nums, target, 0, pivot);
        // return -1;
        

        
    }
    
    public int binarysearch(int[] nums, int target, int lo, int hi){
        int mid;
        while(hi>=lo){
            mid = lo + (hi-lo)/2;
            if(nums[mid]==target) return mid;
            else if(nums[mid]<target) lo = mid+1;
            else hi =mid -1;
        }
        
        return -1;
    }
    public int findpivot(int[] nums){
        int start=0;
        int hi = nums.length-1;
        int lo = 0;
        int mid;
        while(hi>=lo){
            mid = lo + (hi-lo)/2;
            if(mid<hi && nums[mid]>nums[mid+1]) return mid;
            else if(mid>lo && nums[mid]<nums[mid-1]) return mid-1;
            else if(nums[mid]>nums[start]) lo=mid+1;
            else hi=mid-1;
        }
        return -1;
    }
}
